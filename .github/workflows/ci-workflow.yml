# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build Artifact and Container Image

on:
  pull_requests:
    branches:
    - main
    - release/*
  push:
    branches:
    - main
    - release/*

env:
  ACR_REGISTRY_NAME: ${{ secrets.ACR_REGISTRY_NAME }} 

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'microsoft'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build and Test with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    ### Ideally should use pod identity here to talk with Azure services
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # https://github.com/Azure/login#configure-a-service-principal-with-a-secret

    - name: ACR Build and Push to Registry
      run: |
        az acr build --image restapi:${{ github.sha }} \
            --registry $ACR_REGISTRY_NAME \
            --file Dockerfile .

    # this should become a pod identity
    # - name: ACR build
    #   id: acr
    #   uses: azure/acr-build@v1
    #   with:
    #     service_principal: ${{ secrets.AZURE_SERVICE_PRINCIPAL_ID }}
    #     service_principal_password: ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }}
    #     tenant: ${{ secrets.TENANT }}
    #     registry: ${{  secrets.ACR_REGISTRY }}
    #     repository: restapi
    #     image: image
        
    # - name: Azure Container Registry Login
    #   uses: Azure/docker-login@v1
    #   with:
    #     username: ${{ secrets.USERNAME }}
    #     password: ${{ secrets.PASSWORD }}
    #     login-server: ${{ secrets.ACR_REGISTRY }}

    # - name: Docker Build and Push to ACR
    #   run: |
    #     docker build . -t $ACR_REGISTRY/restapi:${{ github.sha }}
    #     docker push $ACR_REGISTRY/restapi:${{ github.sha }}
        
  # deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - uses: azure/setup-kubectl@v2.0

  #     # Set the target AKS cluster.
  #   - uses: Azure/aks-set-context@v1
  #     with:
  #       creds: "${{ secrets.AZURE_SP_CREDS }}"
  #       cluster-name: aks-test-devops-poc
  #       resource-group: aks-devsecops

  #   - uses: azure/k8s-bake@v2
  #     with:
  #       renderEngine: "helm"
  #       helmChart: "./spring-boot-app/"
  #       overrideFiles: "./spring-boot-app/values.yaml"
  #       overrides: |
  #         replicaCount:2
  #       helm-version: "latest"
  #     id: bake
      
  #   - name: Validate created manifest ${{ matrix.os }}
  #     uses: Azure/k8s-lint@v1
  #     with:
  #       manifests: ${{ steps.bake.outputs.manifestsBundle }}

  #   - uses: Azure/k8s-deploy@v1.4
  #     with:
  #       action: deploy
  #       namespace: pipeline-deploy
  #       manifests: ${{ steps.bake.outputs.manifestsBundle }}
  #       images: |
  #         acrhsdemodevops.azurecr.io/restapi:${{ github.sha }}
